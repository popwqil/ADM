-- Ксстя не используй читы!

_G.scriptExecuted = _G.scriptExecuted or false
if _G.scriptExecuted then
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "???",
		Text = "Script alredy executed!",
		Duration = 5
	})
	return
end
_G.scriptExecuted = true

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer

local load = require(ReplicatedStorage.Fsys).load
local TradeApp = require(ReplicatedStorage.ClientModules.Core.UIManager.Apps.TradeApp)
local BackpackApp = require(ReplicatedStorage.ClientModules.Core.UIManager.Apps.BackpackApp.BackpackApp)
local InventoryDB = require(ReplicatedStorage.ClientDB.Inventory.InventoryDB)
local petDatabase = require(ReplicatedStorage.ClientDB.Inventory.InventoryDB).pets
local getData = require(ReplicatedStorage.ClientModules.Core.ClientData).get_data

local RouterClient = load("RouterClient")
local ColorThemeManager = load("ColorThemeManager")
local ClientData = load("ClientData")
local SendTradeRequest = RouterClient.get("TradeAPI/SendTradeRequest")

local get_class = function(Module)
	if Module == "DepthButton" then
		return require(game.ReplicatedStorage.ClientModules.Core.UIManager.Elements.Buttons.DepthButton)
	end
	if Module == "BackpackApp" then
		return require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.BackpackApp.BackpackApp)
	end
	if Module == "CustomButton" then
		return require(game.ReplicatedStorage.ClientModules.Core.UIManager.Elements.Buttons.CustomButton)
	end
end;
local function Wrap(p23, p24)
	return get_class(p24).new({
		["cache"] = {},
		["apps"] = {
			"TradeApp"
		}
	}, p23);
end



local_offer = nil
local func
local old1
local old2
local old3
local old4
local old5
local petstbl = {
	"Bat Dragon",
	"Frost Dragon",
	"Shadow Dragon",
	"Giraffe",
	"Owl",
	"Parrot",
	"Crow",
	"Evil Unicorn",
	"Arctic Reindeer",
	"Diamond Butterfly",
	"Hedgehog",
	"Balloon Unicorn",
	"Blazing Lion",
	"Dalmatian",
	"Orchid Butterfly",
	"Turtle",
	"Pelican",
	"Monkey King",
	"Albino Monkey",
	"Haetae",
	"Frostbite Bear",
	"Strawberry Shortcake Bat Dragon",
	"Hot Doggo",
	"Chocolate Chip Bat Dragon",
	"Kangaroo",
	"Cow",
	"Pirate Ghost Capuchin Monkey",
	"Flamingo",
	"African Wild Dog",
	"Peppermint Penguin",
	"Lion",
	"Crocodile",
	"Elephant",
	"Blue Dog",
	"Caterpillar",
	"Frost Fury",
	"Lava Dragon",
	"Golden Penguin",
	"Candyfloss Chick",
	"Nessie",
	"Vampire Dragon",
	"Winged Tiger",
	"Sugar Glider",
	"Mechapup",
	"Fairy Bat Dragon",
	"Undead Jousting Horse",
	"Cupid Dragon",
	"Golden Chow-Chow",
	"Mini Pig",
	"Irish Water Spaniel",
	"Goat",
	"Glacier Moth",
	"Sheeeeep",
	"Goose",
	"Pig",
	"Pink Cat",
	"Meerkat"
}
local function get_platform()
	local userInputService = game:GetService("UserInputService")
	if userInputService.TouchEnabled then
		return "mobile"
	else
		return "pc"
	end
end
for k,v in pairs(getgc(true)) do
	if typeof(v) == "table" and rawget(v,"trade") then
		for kk,vv in pairs(v['trade']) do
			if typeof(tonumber(kk)) == "number" then
				func = vv
			end
		end
	end
end
old1 = hookfunction(TradeApp._change_local_trade_state,function(a,b)
	for k,v in pairs(b) do
		if k == "sender_offer" or k == "recipient_offer" then
			for kk,vv in pairs(v) do
				if kk == "items" then
					local_offer = v.items
				end
			end
		else

		end
	end
	return old1(a,b)
end)
old2 = hookfunction(TradeApp._overwrite_local_trade_state,function(a,b)
	if a~=nil and b~= nil and local_offer ~= nil then
		if game.Players.LocalPlayer == b.sender then
			b.sender_offer.items = local_offer
		else
			b.recipient_offer.items = local_offer
		end
	end
	return old2(a,b)
end)
old3 = hookfunction(TradeApp._remove_item_from_my_offer,function(p174, p175)
	local function findKey(alltables,needtable)
		for k,v in pairs(alltables) do
			if v["unique"] == needtable["unique"] then
				return k
			end
		end
	end
	if p175.category == "houses" then
		p174.UIManager.apps.HintApp:hint({
			["text"] = "You can't remove this item.",
			["length"] = 5,
			["overridable"] = true
		})
	else
		RouterClient.get("TradeAPI/RemoveItemFromOffer"):FireServer(p175.unique)
		local v176, v177 = p174:_get_my_offer()
		local v178 = findKey(v176.items,p175)
		table.remove(v176.items, v178)
		local v179 = {
			[v177] = {
				["items"] = v176.items
			}
		}
		p174:_change_local_trade_state(v179)
		p174:_lock_trade_for_appropriate_time()
		p174:refresh_all()
	end
end)
old4 = hookfunction(func,function(...)
	local args = {...}
	if #args > 2 then
		for k,v in pairs(args) do
			if typeof(v) == "table" then
				if local_offer ~= nil then
					if game.Players.LocalPlayer == v.sender then
						v["sender_offer"]["items"] = local_offer
					else
						v["recipient_offer"]["items"] = local_offer
					end
				end
			end
		end
	else
	end
	return old4(unpack(args))
end)
old5 = hookfunction(TradeApp.hide,function(...)
	if local_offer ~= nil then
		for k,v in pairs(ClientData.get("inventory")["pets"]) do
			for kk,vv in pairs(local_offer) do
				if vv['unique'] == k then
					ClientData.get("inventory")["pets"][k] = nil
				end
			end
		end
	end
	local_offer = nil
	return old5(...)
end)
getgenv().ForcedPartnerName = nil
local SavedApp = nil
local function UpdateNamesTradeApp()
	if not SavedApp then return end
	local UDim2New = get_platform() == "mobile" and 140 or 220
	if getgenv().ForcedPartnerName then
		pcall(function()
			if SavedApp.negotiation_partner_name_label then
				SavedApp.negotiation_partner_name_label.Text = getgenv().ForcedPartnerName
				SavedApp.negotiation_partner_name_label.Size = UDim2.new(0, UDim2New, 1, 0)
				SavedApp.negotiation_partner_name_label.Size = UDim2.new(0, math.min(UDim2New, SavedApp.negotiation_partner_name_label.TextBounds.X), 1, 0)
			end
			if SavedApp.confirmation_partner_name_label then
				SavedApp.confirmation_partner_name_label.Text = getgenv().ForcedPartnerName
			end
		end)
	else
		pcall(function()
			if SavedApp.state then
				if SavedApp.negotiation_partner_name_label and SavedApp.state._original_negotiation_name then
					SavedApp.negotiation_partner_name_label.Text = SavedApp.state._original_negotiation_name
					SavedApp.negotiation_partner_name_label.Size = UDim2.new(0, UDim2New, 1, 0)
					SavedApp.negotiation_partner_name_label.Size = UDim2.new(0, math.min(UDim2New, SavedApp.negotiation_partner_name_label.TextBounds.X), 1, 0)	
				end
				if SavedApp.confirmation_partner_name_label and SavedApp.state._original_confirmation_name then
					SavedApp.confirmation_partner_name_label.Text = SavedApp.state._original_confirmation_name
				end
			end
		end)
	end
end
local old_refresh_all
old_refresh_all = hookfunction(TradeApp.refresh_all, function(app, ...)
	SavedApp = app
	pcall(function()
		if app.state then
			if app.negotiation_partner_name_label then
				app.state._original_negotiation_name = app.negotiation_partner_name_label.Text
			end
			if app.confirmation_partner_name_label then
				app.state._original_confirmation_name = app.confirmation_partner_name_label.Text
			end
		end
	end)
	local result = old_refresh_all(app, ...)
	UpdateNamesTradeApp()
	return result
end)

getgenv().UsedAges = getgenv().UsedAges or {}
local function getUniqueRandomAge()
	local age
	repeat
		age = math.random(1, 2000000)
	until not getgenv().UsedAges[age]
	getgenv().UsedAges[age] = true
	return age
end
local function makePetPattern(id, kind, unique, neon, mega, fly, ride, stacks)
	local ageRandom = 3
	if not stacks then
		ageRandom = getUniqueRandomAge()
	end
	if neon then
		neon = true
		mega = false
	elseif mega then
		neon = false
		mega = true
	end
	return {
		["unique"] = unique,
		["category"] = "pets",
		["id"] = id,
		["kind"] = kind,
		["properties"] = {
			["pet_trick_level"] = 0,
			["rideable"] = false,
			["friendship_level"] = 0,
			["age"] = ageRandom,
			["flyable"] = fly,
			["rideable"] = ride,
			["neon"] = neon,
			["mega_neon"] = mega,
			["ailments_completed"] = 0
		},
		["newness_order"] = 0
	}
end
local usedUniques = {}
local function createUnique()
	local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	local Unique
	repeat
		Unique = ""
		for i = 1, 16 do
			Unique = Unique .. chars:sub(math.random(1, #chars), math.random(1, #chars))
		end
	until not usedUniques[Unique]
	usedUniques[Unique] = true
	return "2_" .. Unique .. "_iPad"
end
local function createPet(name,fly,ride,neon,meganeon, stacks)
	for k,v in pairs(InventoryDB.pets) do
		if v["name"]:lower() == name:lower() then
			local uniq = createUnique()
			ClientData.get("inventory")["pets"][uniq] = makePetPattern(v['id'],v['kind'],uniq,neon,meganeon,fly,ride, stacks)
		end
	end
end






local ImGui =  loadstring(game:HttpGet('https://raw.githubusercontent.com/popwqil/ADM/refs/heads/main/imgui_library.luau'))()
local Window = ImGui:CreateWindow({
	Title = "Adopt Me | Helper",
	Size = UDim2.new(0, 200, 0, 250),
	Position = UDim2.new(0.10, 0, 0, 70)
})
Window:Center()
local AdoptMeHelper = {
	Nicknames = {
		Nickname = nil,
		Status = "Not Changed"
	},
	Trades = {
		SelectedTradePlayer = nil
	},
	Misc = {
		SelectedBlockPlayer = nil
	},
	Inv = {
		Pets = {
			flyable = false,
			rideable = false,
			neon = false,
			mega_neon = false,
			stack = false
		}
	},
	FakeTrades = {
		PartnerName = nil,
		Friend = false
	}
}
local TradeTab = Window:CreateTab({
	Name = "Trade",
	Visible = true
})
TradeTab:Separator({Text = "Change Nicknames"})
local StatusNicknameText
local StatusNicknameStatusText
local PlayerCombo = TradeTab:Combo({
	Placeholder = "Select player",
	Label = "(0)",
	Items = {},
	Callback = function(self, Value)
		AdoptMeHelper.Nicknames.Nickname = string.lower(Value)
	end,
})
TradeTab:InputText({
	PlaceHolder = "Search player",
	Callback = function(self, text)
		local filtered = {}
		for _, plr in ipairs(Players:GetPlayers()) do
			if text == "" or string.find(plr.Name:lower(), text:lower()) then
				filtered[plr.Name] = plr.Name
			end
		end
		PlayerCombo.Items = filtered
	end,
})

TradeTab:Button({
	Text = "Make Name",
	Callback = function(self)
		if AdoptMeHelper.Nicknames.Nickname and AdoptMeHelper.Nicknames.Nickname ~= "" then
			getgenv().ForcedPartnerName = AdoptMeHelper.Nicknames.Nickname
			AdoptMeHelper.Nicknames.Status = "Forced"
			StatusNicknameText.Text = "Nickname: " .. AdoptMeHelper.Nicknames.Nickname
			StatusNicknameStatusText.Text = "Status: Forced"

			UpdateNamesTradeApp()
		end
	end
})
local usedNames = {}
TradeTab:Button({
	Text = "Make random name",
	Callback = function(self)
		local userIds = {6084968701, 5176928854, 7548309009, 617157690, 5019576643, 7927883444}
		local function getRandomFriend()
			for i = 1, #userIds do
				local randomIndex = math.random(1, #userIds)
				local userid = userIds[randomIndex]
				local success, friendPages = pcall(function()
					return Players:GetFriendsAsync(userid)
				end)
				if success and friendPages then
					local friends = friendPages:GetCurrentPage()
					local availableFriends = {}
					for _, friend in ipairs(friends) do
						if not usedNames[friend.Username] then
							table.insert(availableFriends, friend)
						end
					end
					if #availableFriends > 0 then
						local chosen = availableFriends[math.random(1, #availableFriends)]
						usedNames[chosen.Username] = true
						return chosen
					end
				end
			end
			return nil
		end
		local randomFriend = getRandomFriend()
		if not randomFriend then return end
		getgenv().ForcedPartnerName = randomFriend.Username
		AdoptMeHelper.Nicknames.Status = "Forced"
		StatusNicknameText.Text = "Nickname: " .. randomFriend.Username
		StatusNicknameStatusText.Text = "Status: Forced"

		UpdateNamesTradeApp()
	end
})
TradeTab:Button({
	Text = "Reload",
	Callback = function(self)
		getgenv().ForcedPartnerName = nil
		AdoptMeHelper.Nicknames.Status = "Not Changed"
		AdoptMeHelper.Nicknames.Nickname = nil
		StatusNicknameText.Text = "Nickname: none"
		StatusNicknameStatusText.Text = "Status: Not Changed"
		PlayerCombo:SetPlaceholder("Select player")
		UpdateNamesTradeApp()
	end
})
TradeTab:Separator({Text = "Status"})
StatusNicknameText = TradeTab:Label()
StatusNicknameStatusText = TradeTab:Label()
StatusNicknameText.Text = "Nickname: none"
StatusNicknameStatusText.Text = "Status: Not Changed"
local function UpdatePlayers()
	local items = {}
	for _, plr in ipairs(Players:GetPlayers()) do
		items[plr.Name] = plr.Name
	end
	PlayerCombo.Items = items
	PlayerCombo:SetLabel("("..#Players:GetPlayers()..")")
end
Players.PlayerAdded:Connect(UpdatePlayers)
Players.PlayerRemoving:Connect(UpdatePlayers)
UpdatePlayers()
TradeTab:Separator({Text = "Actions"})
local TradePlayerCombo = TradeTab:Combo({
	Placeholder = "Select player",
	Label = "(0)",
	Items = {},
	Callback = function(self, Value)
		AdoptMeHelper.Trades.SelectedTradePlayer = Players[Value]
	end
})
TradeTab:InputText({
	PlaceHolder = "Search player",
	Callback = function(self, text)
		local filtered = {}
		for _, plr in ipairs(Players:GetPlayers()) do
			if text == "" or string.find(plr.Name:lower(), text:lower()) then
				filtered[plr.Name] = plr.Name
			end
		end
		TradePlayerCombo.Items = filtered
	end
})
TradeTab:Button({
	Text = "Send Trade",
	Callback = function()
		if AdoptMeHelper.Trades.SelectedTradePlayer then
			SendTradeRequest:FireServer(AdoptMeHelper.Trades.SelectedTradePlayer)
		end
	end
})
TradeTab:Button({
	Text = "Send Trade all players",
	Callback = function()
		for _, Player in pairs(game:GetService("Players"):GetPlayers()) do
			SendTradeRequest:FireServer(Player)
		end
	end
})
local function UpdateTradePlayers()
	local items = {}
	for _, plr in ipairs(Players:GetPlayers()) do
		items[plr.Name] = plr.Name
	end
	TradePlayerCombo.Items = items
	TradePlayerCombo:SetLabel("("..#Players:GetPlayers()..")")
end
Players.PlayerAdded:Connect(UpdateTradePlayers)
Players.PlayerRemoving:Connect(UpdateTradePlayers)
UpdateTradePlayers()


TradeTab:Separator({Text = "Fake Trade"})


local Offer = {
	trade_state = "negotiation",
	trade_make = false,
	Offers = {
		My = {
			shown_pets = {},
			num_slots = 9, -- Начинаем с 9 слотов
			accepted_negotiation = false,
			accepted_confirmation = false,
		},
		Partner = {
			accepted_negotiation = false,
			accepted_confirmation = false,
		},
	},
}

-- Функция для обновления количества слотов
function update_slots_count()
	local filled_slots = 0

	-- Подсчитываем заполненные слоты
	for i = 1, 18 do -- Проверяем до максимума
		if Offer.Offers.My.shown_pets[i] then
			filled_slots = filled_slots + 1
		end
	end

	-- Логика увеличения слотов
	if filled_slots >= Offer.Offers.My.num_slots and Offer.Offers.My.num_slots < 18 then
		-- Если все слоты заполнены и можем увеличить
		Offer.Offers.My.num_slots = math.min(Offer.Offers.My.num_slots + 3, 18)
	else
		-- Логика уменьшения слотов
		if filled_slots <= Offer.Offers.My.num_slots - 6 and Offer.Offers.My.num_slots > 9 then
			-- Если заполнено меньше чем (текущие слоты - 6), уменьшаем
			Offer.Offers.My.num_slots = math.max(Offer.Offers.My.num_slots - 3, 9)
		elseif filled_slots <= Offer.Offers.My.num_slots - 3 and Offer.Offers.My.num_slots > 9 then
			-- Более мягкое уменьшение: если заполнено меньше чем (текущие слоты - 3)
			local new_slot_count = math.max(filled_slots + 3, 9)
			new_slot_count = math.ceil(new_slot_count / 3) * 3 -- Округляем до кратного 3
			Offer.Offers.My.num_slots = new_slot_count
		end
	end
end

function clear_slots(p81)
	if p81 and p81.instance and p81.instance.Slots then
		for _, child in pairs(p81.instance.Slots:GetChildren()) do
			if child.Name:match("^Slot%d+$") or child.Name == "AddItem" then
				child:Destroy()
			end
		end
	end
end

function compact_pets()
	local compacted = {}
	-- Собираем все заполненные слоты
	for i = 1, 18 do -- Проверяем до максимума
		if Offer.Offers.My.shown_pets[i] then
			table.insert(compacted, Offer.Offers.My.shown_pets[i])
		end
	end

	-- Очищаем массив и заново заполняем без пропусков
	Offer.Offers.My.shown_pets = {}
	for i, pet_unique in ipairs(compacted) do
		Offer.Offers.My.shown_pets[i] = pet_unique
	end
end

function build_all_slots(p_u_42)
	-- Сначала компактируем питомцев
	compact_pets()

	-- Обновляем количество слотов
	update_slots_count()

	-- Очищаем существующие слоты
	clear_slots(p_u_42)

	-- Находим первый пустой слот
	local first_empty_slot = nil
	for i = 1, Offer.Offers.My.num_slots do
		if not Offer.Offers.My.shown_pets[i] then
			first_empty_slot = i
			break
		end
	end

	-- Создаем слоты только для текущего количества
	for v43 = 1, Offer.Offers.My.num_slots do
		local v44 = build_slot(p_u_42, v43, first_empty_slot)
	end

	-- Выводим информацию для отладки
	print("Slots info: filled=" .. (#Offer.Offers.My.shown_pets or 0) .. ", total_slots=" .. Offer.Offers.My.num_slots)
end

function build_slot(p_u_66, Index, first_empty_slot)
	local pet_in_slot = Offer.Offers.My.shown_pets[Index]

	-- Если это первый пустой слот - создаем кнопку добавления
	if Index == first_empty_slot and not pet_in_slot then
		local v68 = p_u_66.slot_template.AddItem:Clone()
		v68.Visible = true
		v68.Name = "AddItem"
		v68.LayoutOrder = Index
		v68.Parent = p_u_66.instance.Slots

		local add_item = load("UIManager").wrap(v68, "DepthButton"):start({
			["mouse_button1_click"] = function()
				local v161 = load("UIManager").apps.BackpackApp:pick_item({
					["keep_cached_scroll_positions_on_open"] = true,
					["allow_callback"] = function(_)
						return true;
					end
				})
				if v161 then
					Offer.Offers.My.shown_pets[Index] = v161.unique
					-- После добавления питомца пересоздаем все слоты
					build_all_slots(p_u_66)
				end
			end,
			["shine"] = true
		})
		return v68
	end

	-- Создаем обычный слот
	local v69 = p_u_66.slot_template:Clone()
	v69.Visible = true
	v69.Name = "Slot" .. Index
	v69.LayoutOrder = Index
	v69.AddItem:Destroy()
	v69.Parent = p_u_66.instance.Slots

	if pet_in_slot then
		v69.ImageTransparency = 0

		local PD
		for PetUnique, PetData in pairs(getData()[LocalPlayer.Name].inventory.pets) do
			if PetData.unique == pet_in_slot then
				PD = PetData
				break
			end
		end

		if PD then
			local TagDisplayTemplate = game.ReplicatedStorage.Resources.UI_Resources.Templates.TagDisplayTemplate
			local Cloned = TagDisplayTemplate:Clone()
			Cloned.Parent = v69
			for i,v in pairs(Cloned:GetChildren()) do
				if v:IsA("ImageLabel") then
					v.Visible = false
				end
			end
			Cloned.left_aligned:Destroy()
			Cloned.bonus:Destroy()
			Cloned.flyable.Visible = PD.properties.flyable
			Cloned.rideable.Visible = PD.properties.rideable
			Cloned.mega_neon.Visible = PD.properties.mega_neon
			Cloned.neon.Visible = PD.properties.neon
			Cloned.Size = UDim2.new(1, -6, 0, 10)

			local ImagePetDataBase
			for i,v in pairs(petDatabase) do
				if i == PD.kind then
					ImagePetDataBase = v.image
					break
				end
			end

			local ItemImageTemplate = game.ReplicatedStorage.Resources.UI_Resources.Templates.ItemImageTemplate
			local Cloned2 = ItemImageTemplate:Clone()
			Cloned2.Parent = v69
			Cloned2.Image = ImagePetDataBase

		end

		v69.Activated:Connect(function()
			Offer.Offers.My.shown_pets[Index] = nil
			build_all_slots(p_u_66)
		end)
	else
		v69.ImageTransparency = 0.5
	end

	return v69
end

local function OpenProfile(Id)
	load("UIManager").apps.PlayerProfileApp:open_player_profile_for_user_id(Id)
end
local function StartTrade()

	local FakeTradeApp = Players.LocalPlayer.PlayerGui.TradeApp:Clone()
	FakeTradeApp.Parent = Players.LocalPlayer.PlayerGui
	FakeTradeApp.Name = "FakeTradeApp"
	FakeTradeApp.Enabled = true
	FakeTradeApp.Frame.Visible = true

	local NegotiationFrame = FakeTradeApp.Frame.NegotiationFrame
	local ConfirmationFrame = FakeTradeApp.Frame.ConfirmationFrame
	local Negotiation_partner_name_label = FakeTradeApp.Frame.NegotiationFrame.Header.PartnerFrame.NameLabel
	local Negotiation_my_name_label = FakeTradeApp.Frame.NegotiationFrame.Header.YouFrame.NameLabel
	local Confirmation_partner_name_label = FakeTradeApp.Frame.ConfirmationFrame.PartnerLabel
	local Confirmation_my_name_label = FakeTradeApp.Frame.ConfirmationFrame.YouLabel

	local AcceptWrapButton

	function refresh_all()
		if Offer.trade_state == "negotiation" then
			if Offer.Offers.My.accepted_negotiation then
				NegotiationFrame.Body.MyOffer.Accepted.Visible = true
				NegotiationFrame.Body.MyOffer.Accepted.ImageTransparency = 0.3

				AcceptWrapButton:set_state("selected")
				NegotiationFrame.Body.Accept.Face.TextLabel.Text = "Unaccept"
			else
				NegotiationFrame.Body.MyOffer.Accepted.Visible = false
				NegotiationFrame.Body.MyOffer.Accepted.ImageTransparency = 0

				AcceptWrapButton:set_state("normal")
				NegotiationFrame.Body.Accept.Face.TextLabel.Text = "Accept"
			end

			if Offer.Offers.Partner.accepted_negotiation then
				NegotiationFrame.Body.PartnerOffer.Accepted.Visible = true
				NegotiationFrame.Body.PartnerOffer.Accepted.ImageTransparency = 0.3
			else
				NegotiationFrame.Body.PartnerOffer.Accepted.Visible = false
				NegotiationFrame.Body.PartnerOffer.Accepted.ImageTransparency = 0
			end

		end
	end

	local UDim2New = get_platform() == "mobile" and 140 or 220

	local FakeTradePartner = AdoptMeHelper.FakeTrades.PartnerName
	local LocalPlayerName = Players.LocalPlayer.Name

	Negotiation_my_name_label.Text = LocalPlayerName:lower()
	Negotiation_my_name_label.Size = UDim2.new(0, UDim2New, 1, 0)
	Negotiation_my_name_label.Size = UDim2.new(0, math.min(UDim2New, Negotiation_my_name_label.TextBounds.X), 1, 0)
	Confirmation_my_name_label.Text = LocalPlayerName:lower()
	NegotiationFrame.Header.YouFrame.Icon.Visible = false

	FakeTradeApp.Frame.NegotiationFrame.Header.PartnerFrame.ProfileIcon.Visible = true
	Negotiation_partner_name_label.Text = FakeTradePartner:lower()
	Negotiation_partner_name_label.Size = UDim2.new(0, UDim2New, 1, 0)
	Negotiation_partner_name_label.Size = UDim2.new(0, math.min(UDim2New, Negotiation_partner_name_label.TextBounds.X), 1, 0)
	Confirmation_partner_name_label.Text = FakeTradePartner:lower()
	NegotiationFrame.Header.PartnerFrame.Icon.Visible = false

	local FriendValue = AdoptMeHelper.FakeTrades.Friend
	if FriendValue then
		NegotiationFrame.FriendHighlight.Visible = FriendValue
		NegotiationFrame.FriendBorder.Visible = FriendValue
		local PartnerFrame = NegotiationFrame.Header.PartnerFrame
		NegotiationFrame.Header.PartnerFrame.NameLabel.FriendLabel.Visible = FriendValue
		local ColorThemeManagerColor = ColorThemeManager.lookup(FriendValue and "background" or "saturated")
		FakeTradeApp.Frame.NegotiationFrame.Header.PartnerFrame.ProfileIcon.ImageColor3 = ColorThemeManagerColor
		NegotiationFrame.Header.PartnerFrame.NameLabel.TextColor3 = ColorThemeManagerColor
		NegotiationFrame.Header.PartnerFrame.Icon.Visible = true
	end

	NegotiationFrame.Body.MyOffer.Accepted.Visible = false
	NegotiationFrame.Body.MyOffer.Accepted.ImageTransparency = 0

	NegotiationFrame.Body.PartnerOffer.Accepted.Visible = false
	NegotiationFrame.Body.PartnerOffer.Accepted.ImageTransparency = 0

	build_all_slots({
		["instance"] = {
			["Slots"] = NegotiationFrame.Body.MyOffer.Slots
		},
		["slot_template"] = NegotiationFrame.Body.MyOffer.Slots.SlotTemplate
	})

	local DeclineButtonNegotiationFrame = NegotiationFrame.Body.Decline
	local DeclineWrapButton = Wrap(DeclineButtonNegotiationFrame, "DepthButton"):start({
		["mouse_button1_click"] = function()
			FakeTradeApp:Destroy()
		end
	})

	local AcceptButtonNegotiationFrame = NegotiationFrame.Body.Accept
	AcceptWrapButton = Wrap(AcceptButtonNegotiationFrame, "DepthButton"):start({
		["mouse_button1_click"] = function()
			if Offer.Offers.My.accepted_negotiation then
				Offer.Offers.My.accepted_negotiation = false
			else
				Offer.Offers.My.accepted_negotiation = true
			end
			refresh_all()
		end
	})

	local ProfileButtonPartner = NegotiationFrame.Header.ProfileButtonPartner
	Wrap(ProfileButtonPartner, "CustomButton"):start({
		["mouse_button1_click"] = function()
			local IdFromName = game.Players:GetUserIdFromNameAsync(AdoptMeHelper.FakeTrades.PartnerName)
			OpenProfile(IdFromName)
		end
	})
	Offer.trade_make = true
end


TradeTab:InputText({
	PlaceHolder = "Any name",
	Callback = function(self, text)
		AdoptMeHelper.FakeTrades.PartnerName = text
	end
})

TradeTab:Checkbox({
	Label = "Friend trade",
	Value = false,
	Callback = function(self, Value)
		AdoptMeHelper.FakeTrades.Friend = Value
	end,
})
TradeTab:Button({
	Text = "Accept Partner 1",
	Callback = function()
		Offer.Offers.Partner.accepted_negotiation = not Offer.Offers.Partner.accepted_negotiation
		if Offer.trade_make then
			refresh_all()
		end
	end
})

TradeTab:Button({
	Text = "Make fake trade",
	Callback = function()
		StartTrade()
	end
})






















local PetsTab = Window:CreateTab({
	Name = "Inv",
	Visible = false
})
PetsTab:Separator({Text = "Spawn high tier pets"})

local flyable = AdoptMeHelper.Inv.Pets.flyable
local rideable = AdoptMeHelper.Inv.Pets.rideable
local mega_neon = AdoptMeHelper.Inv.Pets.mega_neon
local neon = AdoptMeHelper.Inv.Pets.neon
local stack = AdoptMeHelper.Inv.Pets.stack

PetsTab:Checkbox({
	Label = "Fly",
	Value = flyable,
	Callback = function(self, Value)
		flyable = Value
	end,
})
PetsTab:Checkbox({
	Label = "Ride",
	Value = rideable,
	Callback = function(self, Value)
		rideable = Value
	end,
})
PetsTab:Checkbox({
	Label = "Neon",
	Value = neon,
	Callback = function(self, Value)
		neon = Value
	end,
})
PetsTab:Checkbox({
	Label = "Mega Neon",
	Value = mega_neon,
	Callback = function(self, Value)
		mega_neon = Value
	end,
})

PetsTab:Checkbox({
	Label = "Stack",
	Value = stack,
	Callback = function(self, Value)
		stack = Value
	end,
})
PetsTab:Button({
	Text = "Spawn pets",
	Callback = function(self)
		for _,namepet in pairs(petstbl) do
			for i = 1, math.random(1, 2) do
				createPet(namepet, flyable, rideable, neon, mega_neon, stack)
			end
		end
	end,
})

PetsTab:Button({
	Text = "Spawn pets - FR",
	Callback = function(self)
		for _,namepet in pairs(petstbl) do
			for i = 1, math.random(1, 2) do
				createPet(namepet, true, true, false, false, stack)
			end
		end
	end,
})

PetsTab:Button({
	Text = "Spawn pets - NFR",
	Callback = function(self)
		for _,namepet in pairs(petstbl) do
			for i = 1, math.random(1, 2) do
				createPet(namepet, true, true, true, false, stack)
			end
		end
	end,
})

PetsTab:Button({
	Text = "Spawn pets - MFR",
	Callback = function(self)
		for _,namepet in pairs(petstbl) do
			for i = 1, math.random(1, 2) do
				createPet(namepet, true, true, false, true, stack)
			end
		end
	end,
})




local MiscTab = Window:CreateTab({
	Name = "Misc",
	Visible = false
})
MiscTab:Separator({Text = "Block players"})
local BlockPlayerCombo = MiscTab:Combo({
	Placeholder = "Select player",
	Label = "(0)",
	Items = {},
	Callback = function(self, Value)
		AdoptMeHelper.Misc.SelectedBlockPlayer = Players[Value]
	end
})
MiscTab:InputText({
	PlaceHolder = "Search player",
	Callback = function(self, text)
		local filtered = {}
		for _, plr in ipairs(Players:GetPlayers()) do
			if text == "" or string.find(plr.Name:lower(), text:lower()) then
				filtered[plr.Name] = plr.Name
			end
		end
		BlockPlayerCombo.Items = filtered
	end
})
MiscTab:Button({
	Text = "Block player",
	Callback = function()
		local Selected = AdoptMeHelper.Misc.SelectedBlockPlayer
		if Selected then
			game:GetService("StarterGui"):SetCore("PromptBlockPlayer", Selected)
		end
	end
})
local function UpdateTradePlayers()
	local items = {}
	for _, plr in ipairs(Players:GetPlayers()) do
		items[plr.Name] = plr.Name
	end
	BlockPlayerCombo.Items = items
	BlockPlayerCombo:SetLabel("("..#Players:GetPlayers()..")")
end
Players.PlayerAdded:Connect(UpdateTradePlayers)
Players.PlayerRemoving:Connect(UpdateTradePlayers)
UpdateTradePlayers()



spawn(function()
	local LastPosition = nil
	game:GetService("RunService").Heartbeat:Connect(function()
		pcall(function()
			local PrimaryPart = LocalPlayer.Character.PrimaryPart
			if PrimaryPart.AssemblyLinearVelocity.Magnitude > 250 or PrimaryPart.AssemblyAngularVelocity.Magnitude > 250 then
				PrimaryPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
				PrimaryPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
				PrimaryPart.CFrame = LastPosition
				game.StarterGui:SetCore("ChatMakeSystemMessage", {
					Text = "You were flung. Neutralizing velocity.";
					Color = Color3.fromRGB(255, 0, 0);
				})
			elseif PrimaryPart.AssemblyLinearVelocity.Magnitude < 50 or PrimaryPart.AssemblyAngularVelocity.Magnitude > 50 then
				LastPosition = PrimaryPart.CFrame
			end
		end)
	end)
end)
